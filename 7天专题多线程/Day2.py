'''第二天'''
'''
1.多线程有哪些优点？
答：
1.使用线程可以把占据长时间的程序中的任务放到后台去处理。
2.用户界面可以更加吸引人，这样比如用户点击了一个按钮去触发某些事件的处理，可以弹出一个进度条来显示处理的进度
3.程序的运行速度可能加快
4.在一些等待的任务实现上如用户输入、文件读写和网络收发数据等，线程就比较有用了。在这种情况下我们可以释放一些珍贵的资源如内存占用等等。
'''
'''
2.python异步的使用场景有哪些？
答：
多线程和多进程的模型虽然解决了并发问题，但是系统不能无上限地增加线程。
由于系统切换线程的开销也很大，所以，一旦线程数量过多，CPU的时间就花在线程切换上了，真正运行代码的时间就短了，导致性能严重下降。
由于我们要解决的问题是CPU高速执行能力和IO设备的龟速严重不匹配，多线程和多进程只是解决这一问题的一种方法
另一个解决IO问题的方法就是异步，当代码需要执行一个耗时的IO操作时，它只发出IO指令，并不等待IO结果，然后就去执行其他代码了。
一段时间后，当IO返回结果时，再通知CPU进行处理。

异步使用场景：
1.不涉及共享资源，或者对共享资源只读，即非互斥操作
2.没有时序上的严格关系
3.不需要原子操作，或可以通过其他方式控制原子性
4.常用于IO操作等耗时操作，因为比较影响客户体验和使用性能
5.不影响主线程逻辑
'''
'''
3.说说下面几个概念：同步，异步，阻塞，非阻塞
答：
同步：多个任务之间有先后顺序执行，一个执行完下个才能执行。
异步：多个任务之间没有先后顺序，可以同时执行，有时候一个任务可能要在必要的时候获取另一个同时执行的任务的结果，这个就叫回调！
阻塞：如果卡住了调用者，调用者不能继续往下执行，就是说调用者阻塞了。
非阻塞：如果不会卡住，可以继续执行，就是说非阻塞的。
同步异步相对于多任务而言，阻塞非阻塞相对于代码执行而言。
'''